$mainBlue: #2196F3;
$darkenBlue: #2c7be5;
$darkestBlue: #042ae5;
$mainGray: #dde4e6;
$hoverGray: #c3c9cb;
$mainRed: #f44336;
$playerGray: #FBFBFB;
$outlineGray: #D8D8D8;
$white:#ffffff;

$navGray: #303033;
$navDarkGray: #020202;

$gradientPink: #ff0080;
$gradientPurple: #653ace;


@mixin linear-gradient($direction, $color-stops...) {

  @function is-direction($value) {
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

    @return $is-keyword or $is-angle;
  }

  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  @function legacy-direction($value) {
    @if is-direction($value) == false {
      @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
    }

    $conversion-map: (
      to top          : bottom,
      to top right    : bottom left,
      to right top    : left bottom,
      to right        : left,
      to bottom right : top left,
      to right bottom : left top,
      to bottom       : top,
      to bottom left  : top right,
      to left bottom  : right top,
      to left         : right,
      to left top     : right bottom,
      to top left     : bottom right
    );

    @if map-has-key($conversion-map, $value) {
      @return map-get($conversion-map, $value);
    }

    @return 90deg - $value;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}
